INCLUDE 'COSY' ;
PROCEDURE RUN ;

{Georg Berg and Johan Frenje}
{Symmetric MRSt, GB 10/29/2019}

{VARIABLES FOR SYSTEM***********************************}

VARIABLE B1N 1 5;     {dipole1 B-field index}

VARIABLE B1S1 1 3;   {dipole1 entrance-edge curvature}
VARIABLE B1S2 1 3;   {dipole1 exit-edge curvature}

VARIABLE Q1 1;
VARIABLE Q2 1;
VARIABLE H1 1;
VARIABLE H2 1;
VARIABLE Oct 1;
VARIABLE angle 1;
VARIABLE S0 1;
VARIABLE S1 1;
VARIABLE S2 1;
VARIABLE S3 1;
VARIABLE S4 1;

VARIABLE u1 1;       {dipole1 entrance angle}
VARIABLE u2 1;       {dipole1 exit angle}

{START VARIABLES FOR RAY DEFINITION*********************}

VARIABLE XX 1;       {Source size in X}
VARIABLE AX 1;       {Half-emission angle in X-Z (bending) plane}
VARIABLE YY 1;       {Source size in Y}
VARIABLE AY 1;       {Half-emission angle in Y-Z (non-bending) plane}

VARIABLE DE 1;       {current dimensionless ray energy}
VARIABLE color_code 1; {current ray display color}

VARIABLE E0 1;       {ion energy}
VARIABLE gamma 1;    {used for r5 scaling}

{START VARIABLES FOR READ RAY***************************}

VARIABLE WVX 1;       {HO width signal distri at FP}
VARIABLE WVY 1;      {VERTICAL IMAGE SIZE}  
VARIABLE WVL 1;       {POLVAL EQUIVALENT TO WVX}
VARIABLE LC 1;       {Length of central ray}

{VARIABLE FOR VELOCITY ******************************}

VARIABLE VELOC 1;
VARIABLE TKIN 1;

{various other variables ************************}

VARIABLE num_iterations 1;
VARIABLE objective 1;
VARIABLE FP_tilt 1; {Focal plane tilt}
VARIABLE RAYVECOUT 1 11000 8;

VARIABLE Z1 1; 
VARIABLE Z2 1;
VARIABLE X1 1;
VARIABLE X2 1;
VARIABLE numerator 1;
VARIABLE denominator 1;

{some loop indices that need to be declared globally because COSY has bad scoping}
VARIABLE IENERGY 1;
VARIABLE M 1;
VARIABLE N 1;
VARIABLE K 1;

{Resulting design parameters}

VARIABLE FOPR 1 20 9; {FOcal Plane Results}
VARIABLE FPDESIGN 1 10; {Focal Plane Design}
VARIABLE ISODESIGN 1 10; {ISO Plane Design}
VARIABLE RESDEF 12 20;
VARIABLE DESIGNDEF 18 10;

VARIABLE FLAG_HO 1;


{RETURNS THE MAXIMUM OF THE Ith COORDINATE OF RAYVEC}
FUNCTION MAXRAYVEC I;
	VARIABLE ITRAY 1;

	MAXRAYVEC:=-1E10;
	LOOP ITRAY 1 NRAY;
		IF RAYVECOUT(ITRAY,I)>MAXRAYVEC;
			MAXRAYVEC:=RAYVECOUT(ITRAY,I);
		ENDIF;
	ENDLOOP;
ENDFUNCTION;


{RETURNS THE MINIMUM OF THE Ith COORDINATE OF RAYVEC}
FUNCTION MINRAYVEC I;
	VARIABLE ITRAY 1;
	MINRAYVEC:=1E10;
	LOOP ITRAY 1 NRAY;
		IF RAYVECOUT(ITRAY,I)<MINRAYVEC;
			MINRAYVEC:=RAYVECOUT(ITRAY,I);
		ENDIF;
	ENDLOOP;
ENDFUNCTION;


{ set VELOC equal to }
PROCEDURE VELOCITY;
	VARIABLE A_DEUT 1; {DEUTERON MASS IN AMU} 
	A_DEUT := 2.013553213;
	VELOC := SQRT(1-1/(1+TKIN/(AMUMEV*A_DEUT))^2)*CLIGHT;
ENDPROCEDURE;


{Focal Plane Curve R, a neq 0 deg, Fp not perpendicular *******************************}
PROCEDURE calculate_focal_plane_curvature;
	VARIABLE R 1;
	R := (ME(1,6)^2+ME(1,1)^2*ME(1,26)^2)^1.5;
	R := R/(ME(1,1)*(ME(1,6)*ME(1,266)-ME(1,26)*(ME(1,66)+2*ME(1,6)*ME(1,1)*ME(2,26))));
	FPDESIGN(2) := R;
ENDPROCEDURE;


{Calc. signed p-dist}
PROCEDURE calculate_focal_plane_bend;
	FPDESIGN(3) := 1000*0.5*FPDESIGN(7);
	IF ABS(FPDESIGN(2))>ABS(FPDESIGN(7));
		FPDESIGN(3) := 1000*(ABS(FPDESIGN(2)) - SQRT(FPDESIGN(2)*FPDESIGN(2)-0.25*FPDESIGN(7)^2));
	ENDIF;
	IF FPDESIGN(2)<0;
		FPDESIGN(3) := -FPDESIGN(3);
	ENDIF;
ENDPROCEDURE;


{MRSt geometrical Layout *******************************}
PROCEDURE MRSt;
	S0 := 2.00;
	Q1 := -0.0065;
	H1 := -0.0013;
	S1 := 0.10;
	u1 := 0;
	angle := 64;
	u2 := 31;
	S2 := 0.20;
	S3 := 0.20;
	Q2 := 0.02;
	H2 := -0.0030;
	
	B1N(1) := 0.0;
	B1N(2) := 0.0;
	B1N(3) := 0.0;

	B1S1(1) := TAN(u1*3.14159265359/180);
	B1S1(2) := 0.0;
	B1S1(3) := 0.0;
	
	B1S2(1) := TAN(u2*3.14159265359/180);
	B1S2(2) := 0.0;
	B1S2(3) := 0.0;
	
	PS 0.001;
	
	DL S0;
	
	{quad1+hex1: length Q  H  Oct     size}
	M5           0.3    Q1 H1 0   0 0 0.01;
	
	DL S1;
	
	{dipole: R   Î¸     size profile entrance exit order}
	MC       0.6 angle 0.01 B1N     B1S1     B1S2 3;

	DL S2;
	
	{octopole: length Q H Oct     size}
	M5         0.2    0 0 Oct 0 0 0.01;

	DL S3;
	
	{quad2+hex2: length Q  H  Oct     size}
	M5           0.3    Q2 H2 0   0 0 0.01;
	
	{pick this on the fly to get first-order focus}
	S4 := -ME(1,2)/ME(2,2);
	IF S4<0;
		S4 := 0;
	ENDIF;
	DL S4;

	PS 0.02;
ENDPROCEDURE;


{DEFINE CHARACTERISTIC RAYS *************************}
PROCEDURE define_rays;
	{Define 5 target/spectr. entrance parameters}
	XX := 0.00025;
	AX := .001/2.000;
	YY := 0.0005;
	AY := .003/2.000;

	VELOCITY;

	TKIN := E0*(1+DE);
	VELOCITY;

	IF FLAG_HO=0;
		SR 0 0 0 0 0 DE 0 0 9;
	ENDIF;

	IF FLAG_HO>0;
		SR 0 AX 0 0 0 DE 0 0 color_code;
		SR 0 0.5*AX 0 0 0 DE 0 0 color_code;
		SR 0 0 0 0 0 DE 0 0 color_code;
		SR 0 -0.5*AX 0 0 0 DE 0 0 color_code;
		SR 0 -AX 0 0 0 DE 0 0 color_code;

		SR XX 0 0 0 0 DE 0 0 color_code;
		SR 0.5*XX 0 0 0 0 DE 0 0 color_code;
		SR -0.5*XX 0 0 0 0 DE 0 0 color_code;
		SR -XX 0 0 0 0 DE 0 0 color_code;

		SR 0 0 0 AY 0 DE 0 0 color_code;
		SR 0 0 0 0.5*AY 0 DE 0 0 color_code;
		SR 0 0 0 -0.5*AY 0 DE 0 0 color_code;
		SR 0 0 0 -AY 0 DE 0 0 color_code;

		SR 0 0 YY 0 0 DE 0 0 color_code;
		SR 0 0 0.5*YY 0 0 DE 0 0 color_code;
		SR 0 0 -0.5*YY 0 0 DE 0 0 color_code;
		SR 0 0 YY 0 0 DE 0 0 color_code;

		SR XX/sqrt(2.0) AX YY/sqrt(2.0) AY 0 DE 0 0 color_code;
		SR XX/sqrt(2.0) AX YY/sqrt(2.0) -AY 0 DE 0 0 color_code;
		SR XX/sqrt(2.0) AX -YY/sqrt(2.0) AY 0 DE 0 0 color_code;
		SR XX/sqrt(2.0) AX -YY/sqrt(2.0) -AY 0 DE 0 0 color_code;
		SR XX/sqrt(2.0) -AX YY/sqrt(2.0) AY 0 DE 0 0 color_code;
		SR XX/sqrt(2.0) -AX YY/sqrt(2.0) -AY 0 DE 0 0 color_code;
		SR XX/sqrt(2.0) -AX -YY/sqrt(2.0) AY 0 DE 0 0 color_code;
		SR XX/sqrt(2.0) -AX -YY/sqrt(2.0) -AY 0 DE 0 0 color_code;
		SR -XX/sqrt(2.0) AX YY/sqrt(2.0) AY 0 DE 0 0 color_code;
		SR -XX/sqrt(2.0) AX YY/sqrt(2.0) -AY 0 DE 0 0 color_code;
		SR -XX/sqrt(2.0) AX -YY/sqrt(2.0) AY 0 DE 0 0 color_code;
		SR -XX/sqrt(2.0) AX -YY/sqrt(2.0) -AY 0 DE 0 0 color_code;
		SR -XX/sqrt(2.0) -AX YY/sqrt(2.0) AY 0 DE 0 0 color_code;
		SR -XX/sqrt(2.0) -AX YY/sqrt(2.0) -AY 0 DE 0 0 color_code;
		SR -XX/sqrt(2.0) -AX -YY/sqrt(2.0) AY 0 DE 0 0 color_code;
		SR -XX/sqrt(2.0) -AX -YY/sqrt(2.0) -AY 0 DE 0 0 color_code;
	ENDIF;
ENDPROCEDURE;


{load the computed rays using some black magic and save them in RAYVECOUT}
PROCEDURE READ_RAY;
	VARIABLE ITRAY 1;
	VARIABLE ITCOORD 1;
	VARIABLE POSI 1 8;
	VARIABLE POSF 1 8;
	VARIABLE SAVEMAP 10000 8;
	VARIABLE TMP 1;

	SM SAVEMAP;

	LOOP ITRAY 1 NRAY;
		LOOP ITCOORD 1 8;
			VELGET RAY(ITCOORD) ITRAY TMP;
			POSI(ITCOORD):=TMP;
		ENDLOOP;
		POLVAL 1 SAVEMAP TWOND POSI TWOND POSF TWOND ;
		LOOP ITCOORD 1 8;
			RAYVECOUT(ITRAY,ITCOORD):=POSF(ITCOORD);
		ENDLOOP;
	ENDLOOP;
	
	WVX := MAXRAYVEC(1)-MINRAYVEC(1);
	WVY := MAXRAYVEC(3)-MINRAYVEC(3);
	WVL := MAXRAYVEC(5)-MINRAYVEC(5);
ENDPROCEDURE;


{MAIN ROUTINE ************************************}
PROCEDURE main;

	{initialize COSY ************************************}
	
	OV 3 3 3; {set the calculations to 3rd order}
	WSET 1.0E-3;
	FR 3; {set the fringe field model}

	E0 := 12.45;
	RP E0 2.013553213 1; {E/MeV, Mass A, Charge z}
	gamma := 1 + CONS(ETA);

	{LSYS := 0; {hide the beamline elements}
	LCE := 0; {hide the beamline element names}}
	LAX := 0; {hide the system size numbers}
	{PTY 40; {show it in real space}}

	color_code := 9;

	{DEFINITIONS OF RESULTS ************************}
	RESDEF(1) := 'DE          ';
	RESDEF(2) := 'DE(MeV)     ';
	RESDEF(3) := 'V(m/s)      ';
	RESDEF(4) := 'dPath(m)    ';
	RESDEF(5) := 'Path(m)     ';
	RESDEF(6) := 'TOF(ps)     ';
	RESDEF(7) := 'dTOF(ps)    ';
	RESDEF(8) := 'z*(beam dir)';
	RESDEF(9) := 'Angle a(rad)';
	RESDEF(10) := 'z=z*cos(a)  ';
	RESDEF(11) := 'x(m)in FP   ';
	RESDEF(12) := 'x(m)in ISO  ';

	{DEFINITION OF DESIGN PARAMETERS ***********************}
	DESIGNDEF(1) := 'Tilt Angle(deg)       ';
	DESIGNDEF(2) := 'Curv.Radius(m)       ';
	DESIGNDEF(3) := 'p-dist(mm)         ';
	DESIGNDEF(4) := 'HO Resol.RAY(keV)       ';
	DESIGNDEF(5) := 'Time Resol.(ps)       ';
	DESIGNDEF(6) := 'y-Size(mm)         ';
	DESIGNDEF(7) := 'Plane Length(m)         ';

	{first, optimize the octopole to make the focal plane strait ************}
	
	FLAG_HO := 0;  {look only at the central ray}
	Oct := 0.;
	num_iterations := 0;
	FIT Oct;
		CR;
		define_rays;
		UM;
		MRSt;

		calculate_focal_plane_curvature;
		objective := 1/FPDESIGN(2);
		
		num_iterations := num_iterations+1;
	ENDFIT 1e-8 100 4 objective;
	
	WRITE 6 'in '&SF(num_iterations,'(I2.1)')&' iterations found optimal octopole strength (T) =' Oct;

	{scan thru 9 different energies to draw the focal plane ************}
	
	FLAG_HO := 0;  {look at only the central ray at a given energy}
	LOOP IENERGY 1 9;
		DE := -0.14+(IENERGY-1)*0.14/4; {defines 9 energies, +/- 0.xxx}
		
		CR;
		define_rays;
		UM;
		MRSt;
		READ_RAY;

		FOPR(1,IENERGY) := DE;
		TKIN := 12.45*(1+DE);
		FOPR(2,IENERGY) := TKIN;
		VELOCITY;
		FOPR(3,IENERGY) := VELOC;
		FOPR(4,IENERGY) := (MAXRAYVEC(5)+MINRAYVEC(5))/2;
		FOPR(9,IENERGY) := RAYVECOUT(2,2);
		FOPR(11,IENERGY) := RAYVECOUT(2,1);
	ENDLOOP;
	
	{run the final rays with the central energy and final octopole ************}
	
	DE := 0;
	FLAG_HO := 1;  {look at noncentral rays}

	CR;
	define_rays;
	UM;
	MRSt;
	READ_RAY;

	LC := SPOS;
	
	LOOP K 1 9;
		FOPR(5,K) := LC-FOPR(4,K);
		FOPR(6,K) := 1E12*FOPR(5,K)/FOPR(3,K);
	ENDLOOP;
	LOOP K 1 9;
		FOPR(7,K) := FOPR(6,K) - FOPR(6,5);
		FOPR(8,K) := -FOPR(7,K)*FOPR(3,K)/1E12;
		FOPR(10,K):=FOPR(8,K)*cos(FOPR(9,K));
		FOPR(12,K):=FOPR(11,K)+FOPR(8,K)*sin(FOPR(9,K));
	ENDLOOP;

	FP_tilt := atan(-ME(1,26)/ME(2,2)/ME(1,6))*180/PI;
	FPDESIGN(1) := FP_tilt;
	
	FPDESIGN(4) := WVX*E0*1000/abs(ME(1,6));
	FPDESIGN(5) := WVL*1e12*(1+gamma)/(CONS(v0)*gamma);
	FPDESIGN(6) := WVY*1000;

	FPDESIGN(7) := 0.286*ME(1,6)*TAN(FP_tilt*PI/180);
	calculate_focal_plane_curvature;
	calculate_focal_plane_bend;

	Z1 := FOPR(10,1);
	Z2 := FOPR(10,3);
	X1 := FOPR(12,1);
	X2 := FOPR(12,3);
	ISODESIGN(1) := 90+atan(-(X2-X1)/(Z2-Z1))*180/PI;
	numerator := (X2-X1)*Z1-(Z2-Z1)*X1;
	denominator := sqrt((X2-X1)^2+(Z2-Z1)^2);
	ISODESIGN(3) := 1000*numerator/denominator;

	ISODESIGN(4) := FPDESIGN(4);
	ISODESIGN(5) := FPDESIGN(5);
	ISODESIGN(6) := FPDESIGN(6);
	
	ISODESIGN(7) := sqrt((FOPR(10,1)-FOPR(10,3))^2+(FOPR(12,1)-FOPR(12,3))^2);
	ISODESIGN(2) := ISODESIGN(7)^2/(8*ISODESIGN(3)/1000)+ISODESIGN(3)/2000;
	
	{print out all of the results ********************}

	LOOP M 4 12;
		LOOP N 1 9;
			WRITE 6 'E='&SF(FOPR(2,N),'(F6.3)')&'MeV: FOPR '&RESDEF(M)&SF(FOPR(M,N),'(F16.5)');
		ENDLOOP;
	ENDLOOP;

	WRITE 6 '*****************************'; 
	LOOP N 1 7;
		WRITE 6 'FPDESIGN '&DESIGNDEF(N)&SF(FPDESIGN(N),'(F16.5)');
	ENDLOOP;
	WRITE 6 '*****************************'; 
	LOOP N 1 7;
		WRITE 6 'ISODESIGN '&DESIGNDEF(N)&SF(ISODESIGN(N),'(F16.5)');
	ENDLOOP;
	WRITE 6 '*****************************'; 

	WRITE 6 'L central ray (m)   = '&SF(LC,'(F11.5)');
	WRITE 6 'Dispersion (mm/keV) = '&SF(ME(1,6)/(E0*cos(FP_tilt)),'(F11.5)');
	WRITE 6 'Time skew (ps/keV)  = '&SF((ME(5,6)+ME(1,6)*tan(FP_tilt))*1e12*(1+gamma)/(CONS(v0)*gamma)/E0/1e3,'(F11.5)');
	
	WRITE 6 'mapping matrix:';
	
	PM 6;
	
	{make a pretty multicolor picture ***************}

	FLAG_HO := 1;
	CR;
	DE := -0.01;
	color_code := 3;
	define_rays;
	DE := 0.01;
	color_code := 2;
	define_rays;
	DE := 0.0;
	color_code := 5;
	define_rays;
	UM;
	BP;
	MRSt;
	EP;

	PG -1 -2; {on GRAPHICS screen
	PP -10 0. 0.; {pic001.ps}
	PP -10 0. 90.; {pic002.ps}}

ENDPROCEDURE;


main;

ENDPROCEDURE;
RUN ;
END ;