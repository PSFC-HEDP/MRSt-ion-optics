INCLUDE 'COSY' ;
PROCEDURE RUN ;

{VARIABLES FOR SYSTEM***********************************}

VARIABLE B1N 1 5;     {dipole1 B-field index}

VARIABLE B1S1 1 3;   {dipole1 entrance-edge curvature}
VARIABLE B1S2 1 3;   {dipole1 exit-edge curvature}

VARIABLE Q1 1;
VARIABLE Q2 1;
VARIABLE H1 1;
VARIABLE H2 1;
VARIABLE Oct 1;
VARIABLE angle 1;
VARIABLE S0 1;
VARIABLE S1 1;
VARIABLE S2 1;
VARIABLE S3 1;

VARIABLE u1 1;       {dipole1 entrance angle}
VARIABLE u2 1;       {dipole1 exit angle}
VARIABLE c1 1;       {dipole1 entrance curve depth}
VARIABLE c2 1;       {dipole2 exit curve depth}

{return variable for calculate_velocity*************}
VARIABLE velocity 1;

{other variables*********************}

VARIABLE E0 1;       {ion energy in MeV}
VARIABLE m0 1;       {ion mass in Da}
VARIABLE z0 1;       {ion charge in e}
VARIABLE gamma 1;    {used for r5 scaling}
VARIABLE spectral_range 1; {the range of energies we want to detect in MeV}

VARIABLE RAYVECOUT 1 11000 8;

VARIABLE FP_tilt 1; {Focal plane tilt}
VARIABLE FOPR 1 20 9; {FOcal Plane Results}
VARIABLE FPDESIGN 1 10; {Focal Plane Design}
VARIABLE ISODESIGN 1 10; {ISO Plane Design}


{define a ray given a position on the foil and a position at the aperture}
PROCEDURE define_ray x_foil x_aperture y_foil y_aperture d_energy color;
	SR x_foil (x_aperture-x_foil)/S0 y_foil (y_aperture-y_foil)/S0 0 d_energy 0 0 color;
ENDPROCEDURE;


{DEFINE CHARACTERISTIC RAYS *************************}
PROCEDURE define_rays d_energy color ray_multitude;
	VARIABLE foil_x_radius 1;
	VARIABLE foil_y_radius 1;
	VARIABLE aperture_half_width 1;
	VARIABLE aperture_half_height 1;
	VARIABLE I 1;
	VARIABLE J 1;
	VARIABLE K 1;

	foil_x_radius := 0.00025;
	foil_y_radius := 0.00050;
	aperture_half_width := .001;
	aperture_half_height := .003;

	IF ray_multitude=0;
		define_ray 0 0 0 0 d_energy color;
	ENDIF;
	IF ray_multitude=1;
		LOOP I -1 1;
			LOOP J -1 1;
				IF abs(I+J)#1;
					define_ray 0 I*aperture_half_width 0 J*aperture_half_height d_energy color;
					LOOP K 0 3;
						define_ray foil_x_radius*COS(K/2*PI) I*aperture_half_width foil_y_radius*SIN(K/2*PI) J*aperture_half_height d_energy color;
					ENDLOOP;
				ENDIF;
			ENDLOOP;
		ENDLOOP;
	ENDIF;
	IF ray_multitude=2;
		LOOP I -1 1;
			LOOP J -1 1;
				define_ray 0 I*aperture_half_width 0 J*aperture_half_height d_energy color;
				LOOP K 0 7;
					define_ray foil_x_radius*COS(K/4*PI) I*aperture_half_width foil_y_radius*SIN(K/4*PI) J*aperture_half_height d_energy color;
				ENDLOOP;
			ENDLOOP;
		ENDLOOP;
	ENDIF;
ENDPROCEDURE;


{MRSt geometrical Layout *******************************}
PROCEDURE MRSt;
	VARIABLE FP_depth 1;

	{field profile coefficients}
	B1N(1) := 0.0;
	B1N(2) := 0.0;
	B1N(3) := 0.0;

	{entrance plane coefficients}
	B1S1(1) := TAN(u1*PI/180);
	B1S1(2) := c1/0.015^2;
	B1S1(3) := 0.0;

	{exit plane coefficients}
	B1S2(1) := TAN(u2*PI/180);
	B1S2(2) := c2/0.015^2;
	B1S2(3) := 0.0;

	PS 0.001;

	DL S0;

	{dipole: R   Î¸     size  profile entrance exit order}
	MC       0.6 angle 0.015 B1N     B1S1     B1S2 3;

	DL S1;

	{octopole: length Q H Oct     size}
	M5         0.03   0 0 Oct 0 0 0.020;

	DL S2;

	{quad2+hex2: length Q  H  Oct     size}
	M5           0.07   Q2 H2 0   0 0 0.025;

	{pick this drift length on the fly to get first-order focus}
	S3 := -ME(1,2)/ME(2,2);
	FP_depth := abs(spectral_range/E0*ME(1,26)/ME(2,2));
	IF S3<FP_depth;  {but make sure the detector doesn't collide with the last element}
		S3 := FP_depth;
	ENDIF;
	DL S3;

	PS 0.02;
ENDPROCEDURE;


{calculte the velocity in m/s corresponding to a given d_E value}
PROCEDURE calculate_velocity d_energy;
	VARIABLE E 1;
	E := E0*(1+d_energy);
	velocity := SQRT(1-1/(1+E/(m0*AMUMEV))^2)*CLIGHT;
ENDPROCEDURE;


{load the computed rays using some ~~black magic~~undocumented function and save them in RAYVECOUT}
PROCEDURE READ_RAY;
	VARIABLE IT_RAY 1;
	VARIABLE IT_COORD 1;
	VARIABLE TMP 1;
	VARIABLE tilt_distance 1;
	VARIABLE tilt_time 1;

	LOOP IT_RAY 1 NRAY;
		LOOP IT_COORD 1 8;
			VELGET RAY(IT_COORD) IT_RAY TMP;
			RAYVECOUT(IT_RAY,IT_COORD):=TMP;
		ENDLOOP;

		{here's a little something Georg neglected: the TOF correction due to the detector plane tilt}
		tilt_distance := RAYVECOUT(IT_RAY,1)*tan(FP_tilt);
		calculate_velocity RAYVECOUT(IT_RAY,6);
		tilt_time := tilt_distance/velocity;
		RAYVECOUT(IT_RAY,5) := RAYVECOUT(IT_RAY,5)+tilt_time*CONS(v0)*gamma/(1+gamma);
	ENDLOOP;
ENDPROCEDURE;


{RETURNS THE MAXIMUM OF THE Ith COORDINATE OF RAYVEC}
FUNCTION MAXRAYVEC I;
	VARIABLE IT_RAY 1;

	MAXRAYVEC:=-1E10;
	LOOP IT_RAY 1 NRAY;
		IF RAYVECOUT(IT_RAY,I)>MAXRAYVEC;
			MAXRAYVEC:=RAYVECOUT(IT_RAY,I);
		ENDIF;
	ENDLOOP;
ENDFUNCTION;


{RETURNS THE MINIMUM OF THE Ith COORDINATE OF RAYVEC}
FUNCTION MINRAYVEC I;
	VARIABLE IT_RAY 1;
	MINRAYVEC:=1E10;
	LOOP IT_RAY 1 NRAY;
		IF RAYVECOUT(IT_RAY,I)<MINRAYVEC;
			MINRAYVEC:=RAYVECOUT(IT_RAY,I);
		ENDIF;
	ENDLOOP;
ENDFUNCTION;


{calculate focal plane's radius of curvature}
PROCEDURE calculate_focal_plane_curvature;
	VARIABLE numerator 1;
	VARIABLE denominator 1;
	numerator := (ME(1,6)^2+ME(1,1)^2*ME(1,26)^2)^1.5;
	denominator := ME(1,1)*(ME(1,6)*ME(1,266)-ME(1,26)*(ME(1,66)+2*ME(1,6)*ME(1,1)*ME(2,26)));
	FPDESIGN(2) := numerator/denominator;
ENDPROCEDURE;


{calculate focal plane's signed p-dist (its maximum distance from the detector)}
PROCEDURE calculate_focal_plane_bend;
	FPDESIGN(3) := 1000*0.5*FPDESIGN(7);
	IF ABS(FPDESIGN(2))>ABS(FPDESIGN(7));
		FPDESIGN(3) := 1000*(ABS(FPDESIGN(2)) - SQRT(FPDESIGN(2)*FPDESIGN(2)-0.25*FPDESIGN(7)^2));
	ENDIF;
	IF FPDESIGN(2)<0;
		FPDESIGN(3) := -FPDESIGN(3);
	ENDIF;
ENDPROCEDURE;


{MAIN ROUTINE ************************************}
PROCEDURE main;
	VARIABLE streamlined_mode 1;
	VARIABLE order 1;

	VARIABLE RESDEF 12 20;
	VARIABLE DESIGNDEF 18 10;

	VARIABLE d_energy 1;

	VARIABLE num_iterations 1;
	VARIABLE objective 1;
	
	VARIABLE dispersion 1;
	VARIABLE time_skew 1;

	VARIABLE WVX 1;       {HO width signal distri at FP}
	VARIABLE WVY 1;       {VERTICAL IMAGE SIZE}  
	VARIABLE WVL 1;       {POLVAL EQUIVALENT TO WVX}
	VARIABLE LC 1;        {Length of central ray}

	VARIABLE Z1 1; 
	VARIABLE Z2 1;
	VARIABLE X1 1;
	VARIABLE X2 1;
	VARIABLE numerator 1;
	VARIABLE denominator 1;

	VARIABLE IENERGY 1;
	VARIABLE M 1;
	VARIABLE N 1;
	VARIABLE K 1;


	{initialize COSY ************************************}

	streamlined_mode := 0;
	order := 3;

	OV order 3 3; {set the calculations to 3rd order}
	WSET 1.0E-3;
	FR 3; {set the fringe field model}

	E0 := 12.45; {MeV}
	m0 := 2.013553213; {Da}
	z0 := 1;
	RP E0 m0 z0; {Energy, Mass, Charge}
	gamma := 1 + CONS(ETA);
	spectral_range := 3.56; {MeV}

	{LSYS := 0; {hide the beamline elements}}
	LCE := 0; {hide the beamline element names}
	LAX := 0; {hide the system size numbers}
	PTY 1; {show it in real space}

	{set system parameters}
	S0 := 2.00;
	S1 := .01;
	S2 := 3.806448585129748e-05;
	angle := 44.620850528968475;
	u1 := -39.478031178188914;
	u2 := -24.20989343862091;
	c1 := 0.00038499382147961375;
	c2 := -0.0007278609510021307;
	Q2 := 0.027783210866866342;
	H2 := 0.05;

	{DEFINITIONS OF RESULTS ************************}
	RESDEF(1) := 'DE          ';
	RESDEF(2) := 'DE(MeV)     ';
	RESDEF(3) := 'V(m/s)      ';
	RESDEF(4) := 'dPath(m)    ';
	RESDEF(5) := 'Path(m)     ';
	RESDEF(6) := 'TOF(ps)     ';
	RESDEF(7) := 'dTOF(ps)    ';
	RESDEF(8) := 'z*(beam dir)';
	RESDEF(9) := 'Angle a(rad)';
	RESDEF(10) := 'z=z*cos(a)  ';
	RESDEF(11) := 'x(m)in FP   ';
	RESDEF(12) := 'x(m)in ISO  ';

	{DEFINITION OF DESIGN PARAMETERS ***********************}
	DESIGNDEF(1) := 'Tilt Angle(deg)       ';
	DESIGNDEF(2) := 'Curv.Radius(m)       ';
	DESIGNDEF(3) := 'p-dist(mm)         ';
	DESIGNDEF(4) := 'HO Resol.RAY(keV)       ';
	DESIGNDEF(5) := 'Time Resol.(ps)       ';
	DESIGNDEF(6) := 'y-Size(mm)         ';
	DESIGNDEF(7) := 'Plane Length(m)         ';

	{first, optimize the octopole to make the focal plane strait ************}

	IF order>2;
		Oct := 0.;
		num_iterations := 0;
		FIT Oct;
			CR;
			define_rays 0.0 0 0;
			UM;
			MRSt;

			calculate_focal_plane_curvature;
			objective := 1/FPDESIGN(2);
		
			num_iterations := num_iterations+1;
		ENDFIT 1e-8 100 4 objective;

		WRITE 6 'in '&SF(num_iterations,'(I2.1)')&' iterations found optimal octopole strength (T) =' Oct;
	ENDIF;

	{run the final rays with the central energy and final octopole ************}

	CR;
	define_rays 0.0 0 2;
	UM;
	MRSt;
	FP_tilt := atan(-ME(1,26)/ME(2,2)/ME(1,6));
	READ_RAY;

	WVX := MAXRAYVEC(1)-MINRAYVEC(1);
	WVY := MAXRAYVEC(3)-MINRAYVEC(3);
	WVL := MAXRAYVEC(5)-MINRAYVEC(5);
	LC := SPOS;

	FPDESIGN(1) := FP_tilt*180/PI;

	FPDESIGN(4) := WVX*E0*1000/abs(ME(1,6));
	FPDESIGN(5) := WVL*1e12*(1+gamma)/(CONS(v0)*gamma);
	FPDESIGN(6) := WVY*1000;

	FPDESIGN(7) := spectral_range/E0*ME(1,6)/cos(FP_tilt);
	calculate_focal_plane_curvature;
	calculate_focal_plane_bend;

	dispersion := ME(1,6)/(E0*cos(FP_tilt));
	time_skew := (ME(5,6)*(1+gamma)/gamma-ME(1,6)*tan(FP_tilt))*1e12/CONS(v0)/(E0*1e3);

	{scan thru 9 different energies to draw the focal plane ************}

	IF streamlined_mode=0;
		LOOP IENERGY 1 9;
			d_energy := spectral_range/E0*(-.5+(IENERGY-1)/8); {defines 9 energies, +/- 0.xxx}

			CR;
			define_rays d_energy 0 0;
			UM;
			MRSt;
			READ_RAY;

			calculate_velocity d_energy;
			FOPR(1,IENERGY) := d_energy;
			FOPR(2,IENERGY) := E0*(1+d_energy);
			FOPR(3,IENERGY) := velocity;
			FOPR(4,IENERGY) := (MAXRAYVEC(5)+MINRAYVEC(5))/2;
			FOPR(9,IENERGY) := RAYVECOUT(2,2);  {note that we're using ray 2, not ray 1, because ray 1 is *always* the central ray}
			FOPR(11,IENERGY) := RAYVECOUT(2,1);
		ENDLOOP;
	ENDIF;

	LOOP K 1 9;
		FOPR(5,K) := LC-FOPR(4,K);
		FOPR(6,K) := 1E12*FOPR(5,K)/FOPR(3,K);
	ENDLOOP;
	LOOP K 1 9;
		FOPR(7,K) := FOPR(6,K) - FOPR(6,5);
		FOPR(8,K) := -FOPR(7,K)*FOPR(3,K)/1E12;
		FOPR(10,K):=FOPR(8,K)*cos(FOPR(9,K));
		FOPR(12,K):=FOPR(11,K)+FOPR(8,K)*sin(FOPR(9,K));
	ENDLOOP;

	IF streamlined_mode=0;
		Z1 := FOPR(10,1);
		Z2 := FOPR(10,3);
		X1 := FOPR(12,1);
		X2 := FOPR(12,3);
		ISODESIGN(1) := 90+atan(-(X2-X1)/(Z2-Z1))*180/PI;
		numerator := (X2-X1)*Z1-(Z2-Z1)*X1;
		denominator := sqrt((X2-X1)^2+(Z2-Z1)^2);
		ISODESIGN(3) := 1000*numerator/denominator;

		ISODESIGN(4) := FPDESIGN(4);
		ISODESIGN(5) := FPDESIGN(5);
		ISODESIGN(6) := FPDESIGN(6);

		ISODESIGN(7) := sqrt((FOPR(10,1)-FOPR(10,3))^2+(FOPR(12,1)-FOPR(12,3))^2);
		ISODESIGN(2) := ISODESIGN(7)^2/(8*ISODESIGN(3)/1000)+ISODESIGN(3)/2000;
	ENDIF;

	{print out all of the results ********************}

	IF streamlined_mode=0;
		LOOP M 4 12;
			LOOP N 1 9;
				WRITE 6 'E='&SF(FOPR(2,N),'(F6.3)')&'MeV: FOPR '&RESDEF(M)&SF(FOPR(M,N),'(F16.5)');
			ENDLOOP;
		ENDLOOP;
		
		WRITE 6 'mapping matrix:';
		PM 6;
	ENDIF;

	WRITE 6 'FP distance (cm)    = '&SF(S3*100,'(F11.5)');
	WRITE 6 'L central ray (m)   = '&SF(LC,'(F11.5)');
	WRITE 6 'Dispersion (mm/keV) = '&SF(dispersion,'(F11.5)');
	WRITE 6 'Time skew (ps/keV)  = '&SF(time_skew,'(F11.5)');

	WRITE 6 '*****************************'; 
	LOOP N 1 7;
		WRITE 6 'FPDESIGN '&DESIGNDEF(N)&SF(FPDESIGN(N),'(F16.5)');
	ENDLOOP;
	WRITE 6 '*****************************'; 
	LOOP N 1 7;
		WRITE 6 'ISODESIGN '&DESIGNDEF(N)&SF(ISODESIGN(N),'(F16.5)');
	ENDLOOP;
	WRITE 6 '*****************************'; 

	{make a pretty multicolor picture ***************}

	IF streamlined_mode=0;
		CR;
		define_rays -0.1/E0              4 1;  { 12.35 MeV }
		define_rays  0.1/E0              7 1;  { 12.55 MeV }
		define_rays -spectral_range/2/E0 3 1;  { 10.68 MeV }
		define_rays  spectral_range/2/E0 2 1;  { 14.23 MeV }
		define_rays  0.0                 5 1;  { 12.45 MeV }
		UM;
		BP;
		MRSt;
		EP;

		PG -1 -2; {on GRAPHICS screen}
		PP -10 0. 0.; {pic001.ps}
		PP -10 0. 90.; {pic002.ps}
	ENDIF;

ENDPROCEDURE;


main;

ENDPROCEDURE;
RUN ;
END ;